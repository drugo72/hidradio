############################################################################################
# Makefile for the project Performance_Test Release Using single source files
############################################################################################
# $Id: Makefile 10456 2008-07-30 17:10:10Z sschneid $

# Build specific properties
_TAL_TYPE = AT86RF230B
_PAL_TYPE = AT90USB1287
_PAL_GENERIC_TYPE = AVR
_BOARD_TYPE = USBSTICK_C
_HIGHEST_STACK_LAYER = TAL

# Path variables
## Path to main project directory
PATH_ROOT = ../../../../MAC_v_2_6_1

## Only needed for app_config.h
#PATH_APP = $(PATH_ROOT)/Applications/TAL_Examples/Performance_Test
PATH_APP = ../conf

PATH_TAL = $(PATH_ROOT)/TAL
PATH_TAL_CB = $(PATH_ROOT)/TAL/Src
PATH_PAL = $(PATH_ROOT)/PAL
PATH_RES = $(PATH_ROOT)/Resources
PATH_GLOB_INC = $(PATH_ROOT)/Include

## General Flags
# PROJECT = Performance
# MCU = at90usb1287
# TARGET_DIR = .
# TARGET = $(TARGET_DIR)/$(PROJECT).elf
# CC = avr-gcc

# ## Options common to compile, link and assembly rules
# COMMON = -mmcu=$(MCU)

# ## Compile options common for all C compilation units.
# CFLAGS = $(COMMON)
# CFLAGS += -Wall -Werror -g -Wundef -std=c99 -Os
# CFLAGS += -MD -MP -MT $(*F).o -MF dep/$(@F).d

CFLAGS += -DSNIFFER
CFLAGS += -DDEBUG=0
CFLAGS += -DENABLE_TSTAMP
CFLAGS += -DPROMISCUOUS_MODE
CFLAGS += -DTAL_TYPE=$(_TAL_TYPE)
CFLAGS += -DPAL_GENERIC_TYPE=$(_PAL_GENERIC_TYPE)
CFLAGS += -DPAL_TYPE=$(_PAL_TYPE)
CFLAGS += -DBOARD_TYPE=$(_BOARD_TYPE)
CFLAGS += -DHIGHEST_STACK_LAYER=$(_HIGHEST_STACK_LAYER)

# ## Assembly specific flags
# ASMFLAGS = $(COMMON)
# ASMFLAGS += $(CFLAGS)
# ASMFLAGS += -x assembler-with-cpp -Wa,-g

# ## Linker flags
# LDFLAGS = $(COMMON) -Wl,-Map=$(PROJECT).map
# LDFLAGS += -Wl,-u,vfprintf -lprintf_flt

# ## Intel Hex file production flags
# HEX_FLASH_FLAGS = -R .eeprom

# HEX_EEPROM_FLAGS = -j .eeprom
# HEX_EEPROM_FLAGS += --set-section-flags=.eeprom="alloc,load"
# HEX_EEPROM_FLAGS += --change-section-lma .eeprom=0 --no-change-warnings

## Include directories for application
INCLUDES += -I $(PATH_APP)/Inc
## Include directories for general includes
INCLUDES += -I $(PATH_GLOB_INC)
## Include directories for resources
INCLUDES += -I $(PATH_RES)/Buffer_Management/Inc/
INCLUDES += -I $(PATH_RES)/Queue_Management/Inc/
## Include directories for TAL
INCLUDES += -I $(PATH_TAL)/Inc/
INCLUDES += -I $(PATH_TAL)/$(_TAL_TYPE)/Inc/
## Include directories for PAL
INCLUDES += -I $(PATH_PAL)/Inc/
INCLUDES += -I $(PATH_PAL)/$(_PAL_GENERIC_TYPE)/Generic/Inc
INCLUDES += -I $(PATH_PAL)/$(_PAL_GENERIC_TYPE)/$(_PAL_TYPE)/Inc/
## Include directories for specific boards type
INCLUDES += -I $(PATH_PAL)/$(_PAL_GENERIC_TYPE)/$(_PAL_TYPE)/Boards/
INCLUDES += -I $(PATH_PAL)/$(_PAL_GENERIC_TYPE)/$(_PAL_TYPE)/Boards/$(_BOARD_TYPE)

CSRCS += $(PATH_PAL)/$(_PAL_GENERIC_TYPE)/$(_PAL_TYPE)/Boards/$(_BOARD_TYPE)/pal_irq.c \
	$(PATH_PAL)/$(_PAL_GENERIC_TYPE)/Generic/Src/fake_pal.c \
	$(PATH_PAL)/$(_PAL_GENERIC_TYPE)/Generic/Src/pal_timer.c \
	$(PATH_PAL)/$(_PAL_GENERIC_TYPE)/$(_PAL_TYPE)/Boards/$(_BOARD_TYPE)/pal_board.c \
	$(PATH_PAL)/$(_PAL_GENERIC_TYPE)/Generic/Src/pal_utils.c \
	$(PATH_PAL)/$(_PAL_GENERIC_TYPE)/Generic/Src/pal_trx_access.c \
	$(PATH_RES)/Buffer_Management/Src/bmm.c \
	$(PATH_RES)/Queue_Management/Src/qmm.c \
	$(PATH_TAL)/$(_TAL_TYPE)/Src/tal.c \
	$(PATH_TAL)/$(_TAL_TYPE)/Src/tal_rx.c \
	$(PATH_TAL)/$(_TAL_TYPE)/Src/tal_tx.c \
	$(PATH_TAL)/$(_TAL_TYPE)/Src/tal_ed.c \
	$(PATH_TAL)/$(_TAL_TYPE)/Src/tal_slotted_csma.c \
	$(PATH_TAL)/$(_TAL_TYPE)/Src/tal_pib.c \
	$(PATH_TAL)/$(_TAL_TYPE)/Src/tal_init.c \
	$(PATH_TAL)/$(_TAL_TYPE)/Src/tal_irq_handler.c \
	$(PATH_TAL)/$(_TAL_TYPE)/Src/tal_pwr_mgmt.c \
	$(PATH_TAL)/$(_TAL_TYPE)/Src/tal_rx_enable.c \
	$(PATH_TAL_CB)/tal_ed_end_cb.c


# # Create objects files list with sources files
# OBJECTS += $(CSRCS:.c=.o) $(ASSRCS:.s=.o)

# ## Objects explicitly added by the user
# LINKONLYOBJECTS =

# ## Build
# all: $(TARGET) $(TARGET_DIR)/$(PROJECT).hex $(TARGET_DIR)/$(PROJECT).eep $(TARGET_DIR)/$(PROJECT).lss size


# .PHONY: objfiles
# objfiles: $(OBJECTS)

# # create object files from C source files.
# %.o: %.c
# 	@echo 'Building file: $<'
# 	@$(shell mkdir $(TARGET_DIR) 2>/dev/null)
# 	@$(shell mkdir $(TARGET_DIR)/dep 2>/dev/null)
# 	@$(CC) $(INCLUDES) $(CFLAGS) -c $< -o $(TARGET_DIR)/$(@F)

# $(TARGET): $(OBJECTS)
# 	@echo "Linking"
# 	@$(CC) $(LDFLAGS) $(addprefix $(TARGET_DIR)/,$(notdir $(OBJECTS))) $(LINKONLYOBJECTS) $(LIBDIRS) $(LIBS) -o $(TARGET)

# %.hex: $(TARGET)
# 	avr-objcopy -O ihex $(HEX_FLASH_FLAGS)  $< $@

# %.eep: $(TARGET)
# 	avr-objcopy $(HEX_EEPROM_FLAGS) -O ihex $< $@ || exit 0

# %.lss: $(TARGET)
# 	avr-objdump -h -S $< > $@

# ## avr-size options
# IS_WIN32 := $(shell uname -s | sed -n -e 's/^MINGW.*/-C/p' -e 's/^CYGWIN.*/-C/p')
# ifdef IS_WIN32
# SIZEFLAGS = -C --mcu=${MCU}
# else
# SIZEFLAGS = -B
# endif

# size: ${TARGET}
# 	@echo
# 	@avr-size $(SIZEFLAGS) ${TARGET}

# ## Clean target
# .PHONY: clean
# clean:
# 	-rm -rf $(TARGET_DIR)/*.o $(TARGET_DIR)/$(PROJECT).elf dep/* $(TARGET_DIR)/$(PROJECT).hex $(TARGET_DIR)/$(PROJECT).eep $(TARGET_DIR)/$(PROJECT).lss $(TARGET_DIR)/$(PROJECT).map

# ## Other dependencies
# -include $(shell mkdir dep 2>/dev/null) $(wildcard dep/*)
